# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score, davies_bouldin_score

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö
@st.cache_data
def load_data():
    df = pd.read_csv('Cust_Spend.csv')
    return df.dropna()

def preprocess_data(df):
    df = df.copy()
    df = df[df['Customer Age'] < 100]  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∞–Ω–æ–º–∞–ª—ñ—ó –∑–∞ –≤—ñ–∫–æ–º
    df = df[(df['Revenue'] < 10000) & (df['Cost'] < 10000)]  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–∏–∫–∏–¥–∏
    df['Unit Price'] = df['Revenue'] / df['Quantity']
    df['Unit Cost'] = df['Cost'] / df['Quantity']
    return df

# –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def main():
    st.set_page_config(
        page_title="Customer Analytics Dashboard",
        layout="wide",
        menu_items={'About': "–ê–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤"}
    )

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    df = load_data()
    processed_df = preprocess_data(df)

    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    with st.sidebar:
        st.title("üîç –§—ñ–ª—å—Ç—Ä–∏")
        selected_years = st.multiselect(
            "–†–æ–∫–∏",
            options=df['Year'].unique(),
            default=df['Year'].unique()
        )
        selected_gender = st.selectbox("–°—Ç–∞—Ç—å", df['Customer Gender'].unique())
        show_clusters = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—é")

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    filtered_df = processed_df[
        (processed_df['Year'].isin(selected_years)) &
        (processed_df['Customer Gender'] == selected_gender)
    ]

    st.title("üìà –ê–Ω–∞–ª—ñ–∑ –ø–æ–∫—É–ø–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥", f"${filtered_df['Revenue'].sum():,.0f}")
    with col2:
        st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫", f"{filtered_df['Customer Age'].mean():.1f} —Ä–æ–∫—ñ–≤")
    with col3:
        st.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", filtered_df.shape[0])

    tab1, tab2, tab3 = st.tabs(["–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–∫—É", "–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è"])

    with tab1:
        fig, ax = plt.subplots()
        sns.histplot(filtered_df['Customer Age'], bins=20, kde=True)
        st.pyplot(fig)

    with tab2:
        category_counts = filtered_df['Product Category'].value_counts()
        fig = px.bar(category_counts, title="–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º")
        st.plotly_chart(fig, use_container_width=True)

    if show_clusters:
        with tab3:
            st.header("–ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
            algorithm = st.selectbox("–ê–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó", ["K-Means", "–Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞", "DBSCAN"])

            numeric_cols = filtered_df.select_dtypes(include='number').columns
            scaler = StandardScaler()
            scaled_data = scaler.fit_transform(filtered_df[numeric_cols])

            if algorithm == "K-Means":
                n_clusters = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤", 2, 10, 4)
                model = KMeans(n_clusters=n_clusters, random_state=42)
                clusters = model.fit_predict(scaled_data)

                pca = PCA(n_components=2)
                pca_data = pca.fit_transform(scaled_data)

                fig = px.scatter(
                    x=pca_data[:, 0], y=pca_data[:, 1], 
                    color=clusters.astype(str), title="K-Means Clustering (PCA)"
                )
                st.plotly_chart(fig, use_container_width=True)

                df_clustered = filtered_df.copy()
                df_clustered['Cluster'] = clusters
                cluster_summary = df_clustered.groupby('Cluster').mean(numeric_only=True)

                st.subheader("–ü—Ä–æ—Ñ—ñ–ª—ñ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
                st.dataframe(cluster_summary)

                fig, ax = plt.subplots(figsize=(12, 6))
                sns.heatmap(cluster_summary.T, annot=True, fmt=".2f", cmap='YlGnBu', linewidths=0.5)
                st.pyplot(fig)

                st.write(f"Silhouette Score: {silhouette_score(scaled_data, clusters):.2f}")
                st.write(f"Davies-Bouldin Index: {davies_bouldin_score(scaled_data, clusters):.2f}")

            elif algorithm == "–Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞":
                st.warning("–Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            elif algorithm == "DBSCAN":
                st.warning("DBSCAN —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")

if __name__ == "__main__":
    main()